<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1489505296740">{:repl-history {:ide [], :local [&quot;(roar.core/match-value! roar.core/slave1 \&quot;key\&quot;)&quot; &quot;(roar.core/find-in-values! roar.core/master \&quot;key\&quot;)&quot; &quot;(def ss (agent 1))&quot; &quot;(send inc ss)&quot; &quot;(send ss inc)&quot; &quot;@ss&quot; &quot;(def atom (atom {}))&quot; &quot;(def atoms (atom {}))&quot; &quot;(def a (atom {}))&quot; &quot;(let [re (fn [coll] (reduce (fn [val acc] (prn val )) coll ))]\n  (swap! a re  )\n  )&quot; &quot;(def te (atom 1))&quot; &quot;(swap! te inc)&quot; &quot;@te&quot; &quot;(swap! (fn [x] (assoc x \&quot;a\&quot; 1)) te)&quot; &quot;(defn qq [x] (assoc x \&quot;a\&quot; 1))&quot; &quot;(qq {})&quot; &quot;(swap! qq te)&quot; &quot;(swap! te qq)&quot; &quot;(-&gt; qq te)&quot; &quot;(-&gt; qq .te)&quot; &quot;(-&gt; te .qq)&quot; &quot;(-&gt; te qq)&quot; &quot;(-&gt; te )&quot; &quot;(swap! te assoc :a 1)&quot; &quot;te&quot; &quot;(swap! a assoc :a 1)&quot; &quot;(swap! a qq)&quot; &quot;(swap! a (fn [x] (assoc x \&quot;a\&quot; 1)))&quot; &quot;(swap! a (fn [col] (reduce (fn [val acc] (prn val) ) col)))&quot; &quot;(roar.core/find-in-values! roar.core/memory1 \&quot;key\&quot; )&quot; &quot;(roar.core/read! roar.core/master \&quot;key\&quot; )&quot; &quot;(roar.core/find-in-values! roar.core/master \&quot;key\&quot; )&quot; &quot;((fn [col] (reduce conj {} col) {:a 1})&quot; &quot;((fn [col] (reduce conj {} col) {:a 1}))&quot; &quot;(reduce conj {} {:a 1})&quot; &quot;(reduce conj {.c 2} {:a 1})&quot; &quot;(reduce conj {:c 2} {:a 1})&quot; &quot;a&quot; &quot;@a&quot; &quot;(def at (atom {}))&quot; &quot;(def at (atom {:a 1}))&quot; &quot;(swap! at (fn [col] (reduce conj {} col)))&quot; &quot;(def at (atom {:store (atom {})}))&quot; &quot;(-&gt; @(:store at))&quot; &quot;(-&gt; (:store at))&quot; &quot;@@at&quot; &quot;at&quot; &quot;@at&quot; &quot;(:store @at)&quot; &quot;(-&gt; at :store)&quot; &quot;(-&gt; @at :store)&quot; &quot;(-&gt; (:store @at) (swap! conj))&quot; &quot;(-&gt; (:store @at) (swap! conj {}))&quot; &quot;(-&gt; (:store @at) (swap! conj {:a 1}))&quot; &quot;(-&gt; (:store @at) (swap! conj {:a 11}))&quot; &quot;@(:store @at)&quot; &quot;(-&gt; (:store @at) (swap! conj {:aa 11}))&quot; &quot;(-&gt; (:store @at) (swap! conj {:aba 11}))&quot; &quot;(str #\&quot;\&quot; \&quot;pattern\&quot;)&quot; &quot;#\&quot;patter\&quot;&quot; &quot;\n(= (roar.core/read! memory1 \&quot;key\&quot;) \&quot;test23\&quot;)&quot; &quot;(roar.core/master)&quot; &quot;(roar.core/memory1)&quot; &quot;(roar.core/memory2)&quot; &quot;(= (roar.core/read! roar.core/memory1 \&quot;key\&quot;) \&quot;test23\&quot;)&quot; &quot;(roar.core/find-in-values! roar.core/master \&quot;test23\&quot; )&quot; &quot;(roar.core/find-in-values! roar.core/master \&quot;.+\&quot; )&quot; &quot;(roar.core/find-in-values! roar.core/master \&quot;.*\&quot; )&quot; &quot;(roar.core/find-in-values! roar.core/master \&quot;\\w+\&quot; )&quot; &quot;(roar.core/find-in-values! roar.core/master \&quot;\\w+\\r\&quot; )&quot; &quot;(roar.core/find-in-values! roar.core/master \&quot;\\w+\\r\\n\&quot; )&quot; &quot;(roar.core/find-in-values! roar.core/master \&quot;test\&quot; )&quot; &quot;(atom {})&quot; &quot;(conj nil \&quot;asd\&quot;)&quot; &quot;(roar.core/-main)&quot; &quot;send&quot; &quot;s&quot; &quot;ss&quot; &quot;(roar.protocol/test-buffer)&quot; &quot;(roar.protocol/test-buffer\n  )&quot; &quot;(roar.protocol/test-buffer \&quot;test\&quot;)&quot; &quot;(roar.protocol/test-command \&quot;test\&quot;)&quot; &quot;(roar.protocol/test-command \&quot;ssst\&quot;)&quot; &quot;(roar.protocol/test-command \&quot;sest\&quot;)&quot; &quot;(roar.protocol/test-command \&quot;asdasdasdasdasdasdasdasdaad\&quot;)&quot; &quot;(byte 0xff)&quot; &quot;(byte -129)&quot; &quot;0xff&quot; &quot;(roar.protocol/test-command \&quot;asdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;)&quot; &quot;(roar.protocol/test-command \&quot;0001sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;)&quot; &quot;(roar.protocol/test-command \&quot;0000sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;)&quot; &quot;(roar.protocol/test-command \&quot;ss00sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;)&quot; &quot;(roar.protocol/parse-frame \&quot;ss00sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;)&quot; &quot;(roar.protocol/parse-frame \&quot;sss0sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;)&quot; &quot;\n(for [x (range 3 7)] (roar.protocol/parse-frame \&quot;sss0sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadsss1111sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;))\n&quot; &quot;(roar.protocol/parse-frame \&quot;sss0sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadsss0sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;)&quot; &quot;111&quot; &quot;(roar.protocol/parse-frame \&quot;sss0sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadsss1111sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;)&quot; &quot;\n(for [x (range 3 70000)] (roar.protocol/parse-frame \&quot;sss0sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadsss1111sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;))\n&quot; &quot;\n(for [x (range 3 11)] (roar.protocol/parse-frame \&quot;sss0sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadsss1111sdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaadasdasdasdasdasdasdasdasdaad\&quot;))\n&quot; &quot;(roar.core/main)&quot;], :remote []}}</component>
</project>