(ns roar.utils.mock)
(require '[roar.utils.byte :as byte])
(require '[roar.utils.protocol :as protocol])


(defn generate-packet
  []
  (byte-array
    [
     (int 107)
     (int 65)
     (int 40)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 85)
     (int 2)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 6)
     (int 101)
     (int 103)
     (int 111)
     (int 114)
     (int 107)
     (int 97)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 7)
     (int 98)
     (int 117)
     (int 103)
     (int 111)
     (int 114)
     (int 107)
     (int 97)
     (int 2)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 3)
     (int 97)
     (int 115)
     (int 100)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 0)
     (int 3)
     (int 97)
     (int 115)
     (int 100)
     (int 10)
     (int 10)
     (int 96)
     (int 42)
     (int 96)
     (int 42)
     (int 96)
     (int 10)
     ]))

(defn parse-raw-frame
  []
  (let
    [
     package (protocol/to-vec (generate-packet))
     id      (byte/bytes-to-int (subvec package 0 2))
     command (byte/bytes-to-int (subvec package 2 3))
     length  (byte/bytes-to-int (subvec package 3 35))
     data    (protocol/parse-data (subvec package 35))
     ]
    (conj
      {
       :id      id
       :command command
       :length  length
       :data    data
       })
    ))
